name: Deploy
on:
    push:
        tags:
            - '[0-9]+.[0-9]+.[0-9]+.[0-9]'

env:
    plugin_name: bill-vektor-salary
    GIT_REPOSITORY_MAIL: ${{ secrets.GIT_REPOSITORY_MAIL }}
    GIT_REPOSITORY_USER: ${{ secrets.GIT_REPOSITORY_USER }}
    GIT_REPOSITORY_FREE: ${{ secrets.GIT_REPOSITORY_FREE }}
    GIT_REPOSITORY_GLOBAL: ${{ secrets.GIT_REPOSITORY_GLOBAL }}
    GIT_TOKEN: ${{ secrets.GIT_TOKEN}}
    GIT_USER: ${{ secrets.GIT_USER }}

jobs:
    php_unit:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php-versions: ['7.4', '8.0', '8.1']
                wp-versions: ['6.7', '6.6', '6.5']
        name: PHP Unit Test on PHP ${{ matrix.php-versions }} / WP ${{ matrix.wp-versions }} Test
        services:
            mysql:
                image: mysql:5.7
                ports:
                    - 3306
                env:
                    MYSQL_ROOT_PASSWORD: wordpress
                    MYSQL_DATABASE: wordpress
                    MYSQL_USER: wordpress
                    MYSQL_PASSWORD: wordpress
        steps:
            - uses: actions/checkout@v4
            - name: Read .node-version
              run: echo "{NODEVERSION}={$(cat .node-version)}" >> $GITHUB_OUTPUT
              id: nodenv
            - name: Setup Node.js (.node-version)
              uses: actions/setup-node@v4
              with:
                  node-version: '${{ steps.nodenv.outputs.NODEVERSION }}'
            - name: Cache multiple paths
              uses: actions/cache@v4
              with:
                  path: vendor
                  key: ${{ runner.os }}-php${{ matrix.php-versions }}-${{ hashFiles('**/composer.lock') }}
            - name: Setup PHP ${{ matrix.php-versions }}
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-versions }}
            - name: install npm scripts
              run: npm install
            - name: Install Composer Packages
              run: composer install
            - name: Install WP-CLI
              run: |
                  curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                  chmod +x wp-cli.phar
                  mv wp-cli.phar /usr/local/bin/wp
            - name: Install several WordPress version by wp-env.override.json
              run: |
                  n=0
                  until [ $n -ge 5 ]
                  do
                      WP_ENV_CORE=WordPress/WordPress#${{ matrix.wp-versions }} WP_ENV_PHP_VERSION=${{ matrix.php-versions }} npm run wp-env start --update && break
                      n=$[$n+1]
                      echo "Retrying wp-env start --update ($n)..."
                      sleep 15
                  done
            - name: Check WordPress Version
              run: npm run wp-env run cli wp core version
            - name: Install Themes
              run: bash bin/install-theme.sh
            - name: Change Permittion
              run: sudo chmod -R 777 ~/wp-env
            - name: Run PHP Unit Test
              run: npm run phpunit
    deploy:
        runs-on: ubuntu-latest
        needs: [php_unit]
        steps:
            - uses: actions/checkout@v4
            - name: Read .node-version
              run: echo "{NODEVERSION}={$(cat .node-version)}" >> $GITHUB_OUTPUT
              id: nodenv
            - name: Setup Node.js (.node-version)
              uses: actions/setup-node@v4
              with:
                  node-version: '${{ steps.nodenv.outputs.NODEVERSION }}'
            - name: Setup PHP 7.4
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 7.4
            - name: Install NPM Scripts
              run: npm install
            - name: Install Composer Packages
              run: composer install
            - name: Install WP-CLI
              run: |
                  curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                  chmod +x wp-cli.phar
                  mv wp-cli.phar /usr/local/bin/wp
            - name: Make Distribution
              run: |
                  npm run dist
                  cd dist/ && zip -r ${{ env.plugin_name }}.zip ${{ env.plugin_name }}/ && mv ${{ env.plugin_name }}.zip ${GITHUB_WORKSPACE}
            - name: rsync deployments
              uses: burnett01/rsync-deployments@5.2.1
              with:
                  switches: -avzr
                  path: ${{ env.plugin_name }}.zip
                  remote_path: ${{ secrets.DEPLOY_PATH_VWS }}
                  remote_host: ${{ secrets.DEPLOY_HOST_VWS }}
                  remote_port: ${{ secrets.DEPLOY_PORT_VWS }}
                  remote_user: ${{ secrets.DEPLOY_USER_VWS }}
                  remote_key: ${{ secrets.DEPLOY_KEY_VWS }}
                  remote_key_pass: ${{ secrets.DEPLOY_KEYPASS_VWS }}
    release:
        runs-on: ubuntu-latest
        needs: [php_unit]
        steps:
            - uses: actions/checkout@v4
            - name: Read .node-version
              run: echo "{NODEVERSION}={$(cat .node-version)}" >> $GITHUB_OUTPUT
              id: nodenv
            - name: Setup Node.js (.node-version)
              uses: actions/setup-node@v4
              with:
                  node-version: '${{ steps.nodenv.outputs.NODEVERSION }}'
            - name: Setup PHP 8.1
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.1
            - name: Install NPM Scripts
              run: npm install
            - name: Install Composer Packages
              run: composer install
            - name: Install WP-CLI
              run: |
                  curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                  chmod +x wp-cli.phar
                  mv wp-cli.phar /usr/local/bin/wp
            - name: Make Distribution
              # "npm run dist" の中で composer install --no-dev & npx gulp dist してるが、毎回「ちゃんと --no-dev 処理されてるのか？」と心配になるので直書きに変更
              run: |
                  composer install --no-dev
                  npx gulp dist
                  cd dist/ && zip -r ${{ env.plugin_name }}.zip ${{ env.plugin_name }}/ && mv ${{ env.plugin_name }}.zip ${GITHUB_WORKSPACE}
            - name: Create GitHub Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false
            - name: Upload Release Asset
              id: upload-release-asset
              uses: actions/upload-release-asset@v1.0.1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ env.plugin_name }}.zip
                  asset_name: ${{ env.plugin_name }}.zip
                  asset_content_type: application/zip